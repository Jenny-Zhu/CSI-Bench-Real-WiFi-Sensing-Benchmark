train_supervised_acf模仿train_supervised_csi改成一样的
我们这个repo先不管foundation model pre-training
让cursor把不相关的config arguments还有code都去掉
我们的model只用supervised learning 来train from scratch
“load_model_scratch”模仿之前的写法（留flag 允许user选择model 和task就好， model 用MLP, LSTM, ResNet-18, Transformer）：
def load_model(task, model_name, win_len,feature_size):
  classes = {'HumanNonhuman':2, 'FourClass':4, 'HumanID':4, 'HumanMotion':3, 'ThreeClass':3, 'DetectionandClassification':5, 'Detection':2}
  # Based on different model, adjust the setting
  if model_name == 'MLP':
    print("using model: MLP")
    model = OW_MLP(classes[task], win_len, feature_size)
    train_epoch = 200

  elif model_name == 'LeNet':
    print("using model: LeNet")
    model = OW_LeNet(classes[task], win_len, feature_size)
    train_epoch = 200

  elif model_name == 'ResNet18':
    print("using model: ResNet18")
    model = ResNet18(classes[task], win_len, feature_size)
    print("Model after initialization:", model)  # add this line
    train_epoch = 200

  elif model_name == 'ResNet50':
    print("using model: ResNet50")
    model = ResNet50(classes[task], win_len, feature_size)
    train_epoch = 200

  elif model_name == 'ResNet101':
    print("using model: ResNet101")
    model = ResNet101(classes[task], win_len, feature_size)
    train_epoch = 200

  elif model_name == 'GRUNet':
    print("using model: GRUNet")
    model = GRUNet(classes[task], win_len, feature_size)
    train_epoch = 200

  elif model_name == 'RNN':
    print("using model: RNN")
    model = RNN(classes[task], win_len, feature_size)
    train_epoch = 200

  elif model_name == 'LSTM':
    print("using model: LSTM")
    model = LSTM(classes[task], win_len, feature_size)
    train_epoch = 200

  elif model_name == 'BiLSTM':
    print("using model: BiLSTM")
    model = BiLSTM(classes[task], win_len, feature_size)
    train_epoch = 200

  elif model_name == 'CNN+GRU':
    print("using model: CNN+GRU")
    model = CNN_GRU(classes[task], win_len, feature_size)
    train_epoch = 100

  elif model_name == 'ViT':
    print("using model: ViT")
    emb_size = int((win_len / 10) * (feature_size / 2))
    print(emb_size)
    model = ViT(win_len, feature_size, emb_size, num_classes=classes[task])
    train_epoch = 200

  elif model_name == 'BiLSTMAttention':
    print("using model: BiLSTMAttention")
    model = BiLSTMAttention(classes[task], win_len, feature_size, n_unit_lstm=200, n_unit_atten=400)
    train_epoch = 200
  else:
    print("Model Unavaliable!")

  return model
